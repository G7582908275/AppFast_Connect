name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      platform:
        description: '选择要编译的平台'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - windows
          - macos
          - linux
      architecture:
        description: '选择架构 (仅当选择特定平台时有效)'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - x64
          - arm64

jobs:
  # 动态生成构建矩阵
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Generate build matrix
        id: set-matrix
        run: |
          # 获取用户选择的平台和架构
          PLATFORM="${{ github.event.inputs.platform }}"
          ARCH="${{ github.event.inputs.architecture }}"
          
          # 如果是tag推送触发，构建所有平台
          if [[ -z "$PLATFORM" || -z "$ARCH" ]]; then
            PLATFORM="all"
            ARCH="all"
          fi
          
          # 定义所有可能的构建配置
          ALL_CONFIGS='[
            {"os": "windows-latest", "platform": "windows", "arch": "x64", "target": "windows", "kernel": "appfast-core_windows_amd64.exe"},
            {"os": "windows-latest", "platform": "windows", "arch": "arm64", "target": "windows", "kernel": "appfast-core_windows_arm64.exe"},
            {"os": "macos-13", "platform": "macos", "arch": "x64", "target": "macos", "kernel": "appfast-core_darwin_amd64"},
            {"os": "macos-latest", "platform": "macos", "arch": "arm64", "target": "macos", "kernel": "appfast-core_darwin_arm64"},
            {"os": "ubuntu-latest", "platform": "linux", "arch": "x64", "target": "linux", "kernel": "appfast-core_linux_amd64"},
            {"os": "ubuntu-latest", "platform": "linux", "arch": "arm64", "target": "linux", "kernel": "appfast-core_linux_arm64"}
          ]'
          
          # 过滤配置
          if [[ "$PLATFORM" == "all" && "$ARCH" == "all" ]]; then
            # 构建所有平台
            FILTERED_CONFIGS=$(echo "$ALL_CONFIGS" | jq -c ".")
          elif [[ "$PLATFORM" != "all" && "$ARCH" == "all" ]]; then
            # 构建特定平台的所有架构
            FILTERED_CONFIGS=$(echo "$ALL_CONFIGS" | jq -c "[.[] | select(.platform == \"$PLATFORM\")]")
          elif [[ "$PLATFORM" == "all" && "$ARCH" != "all" ]]; then
            # 构建所有平台的特定架构
            FILTERED_CONFIGS=$(echo "$ALL_CONFIGS" | jq -c "[.[] | select(.arch == \"$ARCH\")]")
          else
            # 构建特定平台的特定架构
            FILTERED_CONFIGS=$(echo "$ALL_CONFIGS" | jq -c "[.[] | select(.platform == \"$PLATFORM\" and .arch == \"$ARCH\")]")
          fi
          
          # 确保输出格式正确
          MATRIX_JSON="{\"include\": $FILTERED_CONFIGS}"
          echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT
          echo "生成的构建矩阵: $MATRIX_JSON"

  build:
    needs: generate-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    if: ${{ needs.generate-matrix.outputs.matrix != '{"include":[]}' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.2'
          channel: 'stable'
          cache: false

      - name: Configure Git safe directory
        run: |
          git config --global --add safe.directory /opt/hostedtoolcache/flutter/stable-3.35.2-x64
          flutter --version

      - name: Clean Flutter cache
        run: |
          flutter clean
          flutter pub cache clean

      - name: Enable desktop platforms
        run: |
          flutter config --enable-windows-desktop
          flutter config --enable-linux-desktop
          flutter config --enable-macos-desktop
          flutter doctor -v

      - name: Install Linux dependencies
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            clang \
            cmake \
            ninja-build \
            pkg-config \
            libgtk-3-dev \
            liblzma-dev \
            libsecret-1-dev \
            libblkid-dev \
            liblzma-dev \
            libsqlite3-dev \
            libayatana-appindicator3-dev \
            libx11-dev \
            libxrandr-dev \
            libxss-dev

      - name: Install Windows dependencies
        if: matrix.platform == 'windows'
        run: |
          # Windows通常不需要额外的依赖安装
          echo "Windows dependencies check completed"

      - name: Install macOS dependencies
        if: matrix.platform == 'macos'
        run: |
          # macOS通常不需要额外的依赖安装
          echo "macOS dependencies check completed"

      - name: Setup Java (for Android builds)
        if: matrix.platform == 'android'
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Install dependencies
        run: flutter pub get

      - name: Copy sing-box kernel (Linux/macOS)
        if: matrix.platform != 'windows'
        run: |
          # 创建目标目录
          mkdir -p assets/libs
          
          # 复制对应平台的内核文件
          cp sing-box/${{ matrix.kernel }} assets/libs/core
          
          # 设置执行权限
          chmod +x assets/libs/core

      - name: Copy sing-box kernel (Windows)
        if: matrix.platform == 'windows'
        shell: pwsh
        run: |
          # 创建目标目录
          New-Item -ItemType Directory -Force -Path "assets/libs"
          
          # 复制对应平台的内核文件
          Copy-Item "sing-box/${{ matrix.kernel }}" "assets/libs/core"

      - name: Build application (Linux/macOS)
        if: matrix.platform != 'windows'
        run: |
          # 构建应用
          flutter build ${{ matrix.target }} --release --split-debug-info=build/debug-info --obfuscate
          
          # 调试：查看构建输出目录结构
          echo "构建输出目录结构："
          find build -type d -name "*${{ matrix.target }}*" | head -10
          echo "构建输出文件："
          find build -name "*${{ matrix.target }}*" -type f | head -10
          
          # 获取版本号
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION="manual-build-$(date +%Y%m%d-%H%M%S)"
          fi
          
          # 动态检测构建输出路径
          if [[ "${{ matrix.platform }}" == "macos" ]]; then
            BUILD_PATH="build/${{ matrix.target }}/Build/Products/Release"
          elif [[ "${{ matrix.platform }}" == "linux" ]]; then
            BUILD_PATH="build/${{ matrix.target }}/x64/release/bundle"
          fi
          
          echo "使用构建路径: $BUILD_PATH"
          echo "版本号: $VERSION"
          echo "GITHUB_REF: $GITHUB_REF"
          
          # 检查路径是否存在
          if [ ! -d "$BUILD_PATH" ]; then
            echo "错误: 构建路径不存在: $BUILD_PATH"
            echo "可用的构建目录:"
            find build -type d -name "*${{ matrix.target }}*"
            exit 1
          fi
          
          # 清理调试文件以减少包大小
          echo "清理调试文件..."
          find "$BUILD_PATH" -name "*.dSYM" -type d -exec rm -rf {} + 2>/dev/null || true
          find "$BUILD_PATH" -name "*.dwarf" -delete 2>/dev/null || true
          find "$BUILD_PATH" -name "*.swiftsourceinfo" -delete 2>/dev/null || true
          
          # 显示清理后的目录大小
          echo "清理后的目录大小："
          du -sh "$BUILD_PATH"
          
          # 进入构建目录并打包
          cd "$BUILD_PATH"
          
          if [[ "${{ matrix.platform }}" == "macos" ]]; then
            zip -r ../../../../../AppFast_Connect_${VERSION}_${{ matrix.platform }}_${{ matrix.arch }}.zip .
          elif [[ "${{ matrix.platform }}" == "linux" ]]; then
            tar -czf ../../../../../AppFast_Connect_${VERSION}_${{ matrix.platform }}_${{ matrix.arch }}.tar.gz .
          fi
          
          cd ../../../../../

      - name: Build application (Windows)
        if: matrix.platform == 'windows'
        shell: pwsh
        run: |
          # 构建应用
          flutter build ${{ matrix.target }} --release --split-debug-info=build/debug-info --obfuscate
          
          # 调试：查看构建输出目录结构
          Write-Host "构建输出目录结构："
          Get-ChildItem -Path build -Recurse -Directory -Name "*${{ matrix.target }}*" | Select-Object -First 10
          Write-Host "构建输出文件："
          Get-ChildItem -Path build -Recurse -File -Name "*${{ matrix.target }}*" | Select-Object -First 10
          
          # 获取版本号
          if ($env:GITHUB_REF -like "refs/tags/*") {
            $VERSION = $env:GITHUB_REF -replace "refs/tags/", ""
          } else {
            $VERSION = "manual-build-$(Get-Date -Format 'yyyyMMdd-HHmmss')"
          }
          
          # 动态检测构建输出路径
          $BUILD_PATH = "build/windows/x64/runner/Release"
          
          Write-Host "使用构建路径: $BUILD_PATH"
          Write-Host "当前工作目录: $(Get-Location)"
          Write-Host "检查构建目录是否存在: $(Test-Path $BUILD_PATH)"
          Write-Host "版本号: $VERSION"
          Write-Host "GITHUB_REF: $env:GITHUB_REF"
          
          # 检查路径是否存在
          if (-not (Test-Path $BUILD_PATH)) {
            Write-Host "错误: 构建路径不存在: $BUILD_PATH"
            Write-Host "可用的构建目录:"
            Get-ChildItem -Path build -Recurse -Directory -Name "*${{ matrix.target }}*"
            Write-Host "build目录内容:"
            Get-ChildItem -Path build -Recurse | Select-Object -First 20
            exit 1
          }
          
          # 进入构建目录并打包
          Set-Location $BUILD_PATH
          
          # 使用PowerShell的Compress-Archive命令
          Compress-Archive -Path * -DestinationPath "../../../../../AppFast_Connect_${VERSION}_${{ matrix.platform }}_${{ matrix.arch }}.zip" -Force
          
          Set-Location ../../../../../

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: AppFast_Connect_${{ matrix.platform }}_${{ matrix.arch }}
          path: |
            AppFast_Connect_*_${{ matrix.platform }}_${{ matrix.arch }}.zip
            AppFast_Connect_*_${{ matrix.platform }}_${{ matrix.arch }}.tar.gz
          retention-days: 30

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: List downloaded files
        run: |
          echo "下载的文件列表："
          find . -name "*.zip" -o -name "*.tar.gz" | sort

      - name: Create Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            AppFast_Connect_windows_x64/*.zip
            AppFast_Connect_windows_arm64/*.zip
            AppFast_Connect_macos_x64/*.zip
            AppFast_Connect_macos_arm64/*.zip
            AppFast_Connect_linux_x64/*.tar.gz
            AppFast_Connect_linux_arm64/*.tar.gz
          draft: false
          prerelease: false
          generate_release_notes: true
          body: |
            ## AppFast Connect 发布版本
            
            ### 支持的平台
            - **Windows**: x64, arm64
            - **macOS**: x64, arm64
            - **Linux**: x64, arm64
            
            ### 下载说明
            - Windows用户请下载对应的zip文件并解压（x64或arm64）
            - macOS用户请下载对应的zip文件并解压（x64或arm64）
            - Linux用户请下载对应的tar.gz文件并解压（x64或arm64）
            
            ### 更新内容
            请查看提交历史了解详细更新内容。

  # 手动构建时的处理任务
  manual-build-summary:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: List downloaded files
        run: |
          echo "手动构建完成！"
          echo "选择的平台: ${{ github.event.inputs.platform }}"
          echo "选择的架构: ${{ github.event.inputs.architecture }}"
          echo "构建产物列表："
          find . -name "*.zip" -o -name "*.tar.gz" | sort
          
          echo ""
          echo "构建产物已上传到GitHub Actions的Artifacts中，可以在Actions页面下载。"
