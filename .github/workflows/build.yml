name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      platform:
        description: '选择要编译的平台'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - windows
          - macos
          - linux
      architecture:
        description: '选择架构 (仅当选择特定平台时有效)'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - x64
          - arm64

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Windows - 支持x64和arm64
          - os: windows-latest
            platform: windows
            arch: x64
            target: windows
            kernel: appfast-singbox_windows_amd64.exe
          - os: windows-latest
            platform: windows
            arch: arm64
            target: windows
            kernel: appfast-singbox_windows_arm64.exe
            
          # macOS - 支持x64和arm64
          - os: macos-latest
            platform: macos
            arch: x64
            target: macos
            kernel: appfast-singbox_darwin_amd64
          - os: macos-latest
            platform: macos
            arch: arm64
            target: macos
            kernel: appfast-singbox_darwin_arm64
            
          # Linux - 支持x64和arm64
          - os: ubuntu-latest
            platform: linux
            arch: x64
            target: linux
            kernel: appfast-singbox_linux_amd64
          - os: ubuntu-latest
            platform: linux
            arch: arm64
            target: linux
            kernel: appfast-singbox_linux_arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check platform selection
        run: |
          echo "选择的平台: ${{ github.event.inputs.platform }}"
          echo "选择的架构: ${{ github.event.inputs.architecture }}"
          echo "当前矩阵平台: ${{ matrix.platform }}"
          echo "当前矩阵架构: ${{ matrix.arch }}"
          
          # 检查是否应该跳过此构建
          if [[ "${{ github.event.inputs.platform }}" != "all" && "${{ github.event.inputs.platform }}" != "${{ matrix.platform }}" ]]; then
            echo "跳过构建：平台不匹配"
            exit 0
          fi
          
          if [[ "${{ github.event.inputs.architecture }}" != "all" && "${{ github.event.inputs.architecture }}" != "${{ matrix.arch }}" ]]; then
            echo "跳过构建：架构不匹配"
            exit 0
          fi
          
          echo "继续构建：平台和架构匹配"

      - name: Setup Flutter
        if: ${{ github.event.inputs.platform == 'all' || github.event.inputs.platform == matrix.platform }} && ${{ github.event.inputs.architecture == 'all' || github.event.inputs.architecture == matrix.arch }}
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.2'
          channel: 'stable'
          cache: false

      - name: Clean Flutter cache
        if: ${{ github.event.inputs.platform == 'all' || github.event.inputs.platform == matrix.platform }} && ${{ github.event.inputs.architecture == 'all' || github.event.inputs.architecture == matrix.arch }}
        run: |
          flutter clean
          flutter pub cache clean

      - name: Force Flutter version
        if: ${{ github.event.inputs.platform == 'all' || github.event.inputs.platform == matrix.platform }} && ${{ github.event.inputs.architecture == 'all' || github.event.inputs.architecture == matrix.arch }}
        run: |
          # 确保使用正确的Flutter版本
          flutter --version
          echo "Flutter路径: $(which flutter)"
          echo "Dart路径: $(which dart)"
          echo "环境变量:"
          echo "PATH: $PATH"

      - name: Verify Flutter version
        if: ${{ github.event.inputs.platform == 'all' || github.event.inputs.platform == matrix.platform }} && ${{ github.event.inputs.architecture == 'all' || github.event.inputs.architecture == matrix.arch }}
        run: |
          echo "Flutter版本信息："
          flutter --version
          echo
          echo "Dart版本信息："
          dart --version
          echo
          echo "Flutter doctor："
          flutter doctor -v

      - name: Enable desktop platforms
        if: ${{ github.event.inputs.platform == 'all' || github.event.inputs.platform == matrix.platform }} && ${{ github.event.inputs.architecture == 'all' || github.event.inputs.architecture == matrix.arch }}
        run: |
          flutter config --enable-windows-desktop
          flutter config --enable-linux-desktop
          flutter config --enable-macos-desktop
          flutter doctor -v

      - name: Install Linux dependencies
        if: matrix.platform == 'linux' && ${{ github.event.inputs.platform == 'all' || github.event.inputs.platform == matrix.platform }} && ${{ github.event.inputs.architecture == 'all' || github.event.inputs.architecture == matrix.arch }}
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            clang \
            cmake \
            ninja-build \
            pkg-config \
            libgtk-3-dev \
            liblzma-dev \
            libsecret-1-dev \
            libblkid-dev \
            liblzma-dev \
            libsqlite3-dev \
            libayatana-appindicator3-dev \
            libx11-dev \
            libxrandr-dev \
            libxss-dev

      - name: Install Windows dependencies
        if: matrix.platform == 'windows' && ${{ github.event.inputs.platform == 'all' || github.event.inputs.platform == matrix.platform }} && ${{ github.event.inputs.architecture == 'all' || github.event.inputs.architecture == matrix.arch }}
        run: |
          # Windows通常不需要额外的依赖安装
          echo "Windows dependencies check completed"

      - name: Install macOS dependencies
        if: matrix.platform == 'macos' && ${{ github.event.inputs.platform == 'all' || github.event.inputs.platform == matrix.platform }} && ${{ github.event.inputs.architecture == 'all' || github.event.inputs.architecture == matrix.arch }}
        run: |
          # macOS通常不需要额外的依赖安装
          echo "macOS dependencies check completed"

      - name: Setup Java (for Android builds)
        if: matrix.platform == 'android' && ${{ github.event.inputs.platform == 'all' || github.event.inputs.platform == matrix.platform }} && ${{ github.event.inputs.architecture == 'all' || github.event.inputs.architecture == matrix.arch }}
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Install dependencies
        if: ${{ github.event.inputs.platform == 'all' || github.event.inputs.platform == matrix.platform }} && ${{ github.event.inputs.architecture == 'all' || github.event.inputs.architecture == matrix.arch }}
        run: flutter pub get

      - name: Copy sing-box kernel
        if: ${{ github.event.inputs.platform == 'all' || github.event.inputs.platform == matrix.platform }} && ${{ github.event.inputs.architecture == 'all' || github.event.inputs.architecture == matrix.arch }}
        run: |
          # 创建目标目录
          mkdir -p assets/libs
          
          # 复制对应平台的内核文件
          cp sing-box/${{ matrix.kernel }} assets/libs/core
          
          # 在Linux和macOS上设置执行权限
          if [[ "${{ matrix.platform }}" == "linux" || "${{ matrix.platform }}" == "macos" ]]; then
            chmod +x assets/libs/core
          fi

      - name: Build application
        if: ${{ github.event.inputs.platform == 'all' || github.event.inputs.platform == matrix.platform }} && ${{ github.event.inputs.architecture == 'all' || github.event.inputs.architecture == matrix.arch }}
        run: |
          # 构建应用
          flutter build ${{ matrix.target }} --release
          
          # 调试：查看构建输出目录结构
          echo "构建输出目录结构："
          find build -type d -name "*${{ matrix.target }}*" | head -10
          echo
          echo "构建输出文件："
          find build -name "*${{ matrix.target }}*" -type f | head -10
          
          # 获取版本号
          VERSION=${GITHUB_REF#refs/tags/}
          
          # 动态检测构建输出路径
          if [[ "${{ matrix.platform }}" == "windows" ]]; then
            BUILD_PATH="build/${{ matrix.target }}/runner/Release"
          elif [[ "${{ matrix.platform }}" == "macos" ]]; then
            BUILD_PATH="build/${{ matrix.target }}/Build/Products/Release"
          elif [[ "${{ matrix.platform }}" == "linux" ]]; then
            BUILD_PATH="build/${{ matrix.target }}/x64/release/bundle"
          fi
          
          echo "使用构建路径: $BUILD_PATH"
          
          # 检查路径是否存在
          if [ ! -d "$BUILD_PATH" ]; then
            echo "错误: 构建路径不存在: $BUILD_PATH"
            echo "可用的构建目录:"
            find build -type d -name "*${{ matrix.target }}*"
            exit 1
          fi
          
          # 进入构建目录并打包
          cd "$BUILD_PATH"
          
          if [[ "${{ matrix.platform }}" == "windows" ]]; then
            zip -r ../../../../AppFast_Connect_${VERSION}_${{ matrix.platform }}_${{ matrix.arch }}.zip .
          elif [[ "${{ matrix.platform }}" == "macos" ]]; then
            zip -r ../../../../../AppFast_Connect_${VERSION}_${{ matrix.platform }}_${{ matrix.arch }}.zip .
          elif [[ "${{ matrix.platform }}" == "linux" ]]; then
            tar -czf ../../../../../AppFast_Connect_${VERSION}_${{ matrix.platform }}_${{ matrix.arch }}.tar.gz .
          fi
          
          cd ../../../../../

      - name: Upload artifacts
        if: ${{ github.event.inputs.platform == 'all' || github.event.inputs.platform == matrix.platform }} && ${{ github.event.inputs.architecture == 'all' || github.event.inputs.architecture == matrix.arch }}
        uses: actions/upload-artifact@v4
        with:
          name: AppFast_Connect_${{ matrix.platform }}_${{ matrix.arch }}
          path: |
            AppFast_Connect_*_${{ matrix.platform }}_${{ matrix.arch }}.zip
            AppFast_Connect_*_${{ matrix.platform }}_${{ matrix.arch }}.tar.gz
          retention-days: 30

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: List downloaded files
        run: |
          echo "下载的文件列表："
          find . -name "*.zip" -o -name "*.tar.gz" | sort

      - name: Create Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            AppFast_Connect_windows_x64/*.zip
            AppFast_Connect_windows_arm64/*.zip
            AppFast_Connect_macos_x64/*.zip
            AppFast_Connect_macos_arm64/*.zip
            AppFast_Connect_linux_x64/*.tar.gz
            AppFast_Connect_linux_arm64/*.tar.gz
          draft: false
          prerelease: false
          generate_release_notes: true
          body: |
            ## AppFast Connect 发布版本
            
            ### 支持的平台
            - **Windows**: x64, arm64
            - **macOS**: x64, arm64
            - **Linux**: x64, arm64
            
            ### 下载说明
            - Windows用户请下载对应的zip文件并解压（x64或arm64）
            - macOS用户请下载对应的zip文件并解压（x64或arm64）
            - Linux用户请下载对应的tar.gz文件并解压（x64或arm64）
            
            ### 更新内容
            请查看提交历史了解详细更新内容。

  # 手动构建时的处理任务
  manual-build-summary:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: List downloaded files
        run: |
          echo "手动构建完成！"
          echo "选择的平台: ${{ github.event.inputs.platform }}"
          echo "选择的架构: ${{ github.event.inputs.architecture }}"
          echo "构建产物列表："
          find . -name "*.zip" -o -name "*.tar.gz" | sort
          
          echo ""
          echo "构建产物已上传到GitHub Actions的Artifacts中，可以在Actions页面下载。"
